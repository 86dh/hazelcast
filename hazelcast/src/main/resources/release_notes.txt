This document lists the new features, enhancements, fixed issues and, removed or deprecated features for Hazelcast IMDG 4.1-BETA-1 release. The numbers in the square brackets refer to the issues in Hazelcast's GitHub repositories.


==== 4.1-BETA-1 ====

1. New Features

* **Instance Tracking:** It is a feature which writes a file on the Hazelcast instance startup
at the configured location. This file contains metadata about the instance, such as version, product name
and process ID, and it is not deleted on the member shutdown.
See https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/#instance-tracking.
* **SQL Implementation:** Implemented the SQL engine that
supports map scans, index scans, projections and filters.
It also introduces the `hazelcast-sql` module to handle the
SQL engine's dependencies on Apache Calcite.
See https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/index.html#sql.
* **Automatic Detection of Discovery Strategy:** It tries to automatically detect the
applicable discovery mechanism based on the runtime environment.
See https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/index.html#auto-detection.


2. Enhancements

* **Improvements in Partial Network Disconnections:** Introduced properties
to be configured to detect and resolve the partial network issues among the
Hazelcast IMDG members.
See https://github.com/hazelcast/hazelcast/pull/16680 and the https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/#partial-network-partitions.
* **Trusted Interfaces:** It is now possible to restrict the source IP addresses
from which the Management Center operations are allowed.
See https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/#limiting-source-addresses.
* **Out-of-the-Box Kerberos Support:** Introduced support for Kerberos
authentication protocol which is one of the standard
solutions for single-sign-on. It also adds the GSSAPI authentication support in
LDAP configuration.
See https://docs.hazelcast.org/docs/4.1-BETA-1/manual/html-single/#kerberos-authentication-type.
* **WAN Throttling Mechanism**: This prevents the WAN consumers from 
getting overloaded by the WAN producers if transferring the WAN events takes
less time than processing them in the target cluster. This can be the case with
WAN synchronization if the network latency is low enough. It can be configured using
the following properties:
** `hazelcast.wan.consumer.invocation.threshold`
** `hazelcast.wan.consumer.ack.delay.backoff.init`
** `hazelcast.wan.consumer.ack.delay.backoff.max`
** `hazelcast.wan.consumer.ack.delay.backoff.multiplier`
https://github.com/hazelcast/hazelcast/pull/17113

The following are the other improvements performed to solve the enhancement
issues opened by the Hazelcast customers/team.

* Added support for tenant control when creating caches. [#17122]
* Added metric count support for sets, and maps having backup reads enabled,
query caches, map stores, custom attributes and WAN replication configurations.
[#17053], [#17071], [#17069], [#17081]
* Added support for `IMap.compute()`. [#17030]
* Added support to allow submitting and executing operations while a member
is shutting down to increase the availability of a cluster more that keeps
large data. [#17028]
* Added `ExtendedMapEntry` in order to create a mechanism for setting TTLs in
entry processors. [#16991]
* Added `hazelcast-azure` discovery plugin to the `hazelcast-all` module. [#16982]
* Introduced the `ConfigRecognition` API that determines if a
provided declarative configuration is recognized by the rules defined in a given
implementation. Along with the API the following three implementations are added:
** `MemberConfigRecognizer` for recognizing member XML and YAML configurations
** `ClientConfigRecognizer` for recognizing client XML and YAML configurations
** `ClientFailoverConfigRecognizer` for recognizing failover client XML and YAML configurations
[#16958]
* Made the diagnostics logs more cloud-friendly so that they are sent to
`stdout` instead of sending to local files. [#16941]
* Improved the mechanism of partition table updates to
eliminate the latencies when these updates are sent to the clients by a member. [#16939]
* Improved the client configuration such that when the client
failover configuration is provided, the reconnect mode cannot
be set as `off`; it now fails fast in this case. [#16886]
* Introduced the `forEach()` loop support for IMap. [#16877]
* Added the `load()` method to `Config`, `ClientConfig` and
`ClientFailoverConfig` classes. This method loads the configuration
with the known locations. If not found, the default configuration is returned. [#16864]
* Improved the `deleteAll()` (MapStore) and ITopic Javadocs. [#16862], [#16861],
* Introduced the `ServerConnection` and `ClientConnection` interfaces
that extend `Connection` for cleaning up purposes. [#16849]
* Implemented the `root` operator for the SQL engine
responsible for getting the final result stream. [#16829]
* Added support for `IMap.computeIfAbsent()`. [#16808]
* Introduced SQL thread pools for query processing. [#16805]
* Introduced the network protocol, base executor and row
interfaces for the SQL engine. [#16799], [#16762]
* Added the `setAll()` and `setAllAsync()` methods for IMap. [#16787]
* Added the `writeOrdered()` method to the `Connection` class
for the purpose of ordered delivery of messages. [#16776]
* Added the creation time metric for the executor service. [#16775]
* Improved an unclear exception message for credentials. [#16756]
* Updated the related aspects of Hazelcast IMDG after the
changes done on the client protocol side to add the ability
to add new parameters, methods, services, events and custom types
to codecs. [#16718]
* Added the `offset` parameter that can be used while creating
inputs in `BufferObjectDataInput`. [#16701]
* Introduced the `putAllAsync()` method for MultiMap. [#16698]
* Defined metrics for ISet and IList collections. [#16665]
* Upgraded log4j2 version to 2.13.0. [#16654]
* Renamed MultiMap proxy implementation to follow the established naming convention:
`ObjectMultiMapProxy` -> `MultiMapProxyImpl`. [#16637]
* Improved the `computeIfPresent()` implementation so that now it keeps a
clone of the old/existing value and uses that for replace/delete operations. [#16636]
* Introduced the `hazelcast.logging.details.enabled` property
to make the logging of cluster version, name and IP optional to
decrease the noise in the logs when, for example, you have a single-member cluster. [#16622]
* Upgraded the Hazelcast Kubernetes plugin version to 2.0.1. [#16590]
* * Added the support for automatically detecting the classloader
of a type for the user code deployment feature. [#16585]
* Made `IMap.putAllAsync()` and `IMap.submitToKeys()` methods public API. [#16449]
* Implemented the base type system for SQL: the base SQL data types
have been defined and mapped to the corresponding Java types.
Type information is used by executor stages to use the right strategy
of expression evaluation. [#15241]
* Clarified the exception message when you connect to a cluster with an
invalid group name. [#15099]
* Refactored the check and retry initialization logic of
`ReplicatedMapProxy` so that they are performed in parallel for different
partitions. [#14331]
* Added a test for the `ClientConsoleApp` class.  [#12298]
* Improved the behavior of `ConcurrentMap.computeIfPresent`:
combined single client-server round trips instead of two (for `get` and
`replace` methods). [#11958]

3. Breaking Changes

* The `TcpIpConnection` class has been renamed as `ServerConnection`.
https://github.com/hazelcast/hazelcast/pull/16839[#16839]

4. Fixes

* Fixed an issue where `ReliableTopicMessageListener` was firing a warning when the client is shutting down. [#17153]
* Fixed the broken interoperability between the `CompletableFuture` methods. [#17020]
* Fixed an issue where touching a map entry having an entry processor working on it
was modifying its time-to-live. [#16987]
* Fixed an issue in the cache service where its pre-join
operation was considering `CacheConfig` as resolved: it
was assuming that key/value types, user customizations and
other cache configurations have been loaded. This was an issue
when the cache is not touched yet. [#16917]
* Fixed an issue where Management Center was not working as expected
when the cluster is set up using advanced network configuration. [#16910]
* Fixed an issue where `ServiceLoader` was round-tripping between URL and URI,
and consequently loses the associated `URLStreamHandler` when trying to load
Hazelcast from a custom class loader. [#16846]
* Fixed an issue where the class definitions, that are registered explicitly in
the serialization configuration and have the same class ID in different factories,
were not handled properly. [#16831]
* Fixed the `NullPointerException` in `IndexCopyBehavior.NEVER` mode. [#16784]
* Fixed an issue where the client permissions for Reliable Topic and Ringbuffer
we're missing. [#16755]
* Fixed an issue where the type information was missing the Metrics MBeans. [#16747]
* Fixed an issue where the RESP API was always requiring the call URLs
to end with a slash character. [#16688]
* Fixed an issue where the service URL for Eureka could not be set
using the declarative configuration. [#16679]
* Fixed an issue where the wait key of a blocking call within
a Raft invocation was still being reported as a live operation,
when the key times out. [#16614]
* Fixed an issue where the upload of classes using the client
user code deployment were not successful when they are retrieved not
in their created order. [#16612]
* Fixed an issue where the size() method was returning a negative
value when map, cache and multimap contain more than Integer.MAX_VALUE entries. [#16594]
* Fixed an invalidation issue when using a transactional map
from a cache with a Near Cache: the cache invalidation event occurs
when the `transactionalMap.put` method is called. As a result,
the entry was getting invalidated before the change is committed to the map. [#16579]
* Fixed an issue where `InPredicate` was not invoking value comparison when the
read attribute is null. [#15100]
* Fixed an issue where Map, Cache, MultiMap data structures
were returning negative values (`size()`) when the size is more than
`Integer.MAX_VALUE`. [#14935]

===  Contributors

We would like to thank the contributors from our open source
community who worked on this release:

* Inel Pandzic
* Omid Pourhadi
* Ryan Lindeborg
* Santhosh Kumar
* Bartek Kowalczyk
* Ashutosh Agrawal
* Ádám Berkecz
* HugeOrangeDev
* Harry Tran
* Stephen Russett
* Ulf Adams
* Abdul Aziz Ali
* Dmitry Konstantinov
* Anmol Chaddha
* lprimak
* keteracel
* Burak Sezer
